PROJECT(libbinbuf)

# meta
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# options
IF(NOT BINBUF_BYTE_TYPE)
	SET(BINBUF_BYTE_TYPE "char")
ENDIF(NOT BINBUF_BYTE_TYPE)

# compiler flags & definitions
IF(MSVC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")
	SET(WERROR_FLAG "/WX")
ELSE(MSVC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -pedantic")
	SET(WERROR_FLAG "-Werror")
ENDIF(MSVC)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})

# config.h
CONFIGURE_FILE(
	binbuf/Config.hh.in
	binbuf/Config.hh
)

INCLUDE_DIRECTORIES(BEFORE ${PROJECT_BINARY_DIR})

# sources
SET(LIBRARY_SOURCES
	binbuf/Buffer.cc
	binbuf/MMapFileContainer.cc
	binbuf/StreamFileContainer.cc
)

SET(LIBRARY_HEADERS
	binbuf/Buffer.hh
	binbuf/FileContainer.hh
	binbuf/MMapFileContainer.hh
	binbuf/StreamFileContainer.hh
)

SET(LIBRARY_INTERNAL_HEADERS
	binbuf/internal/Chunk.hh
	binbuf/internal/ManagedChunk.hh
)

# targets
IF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	MESSAGE(STATUS "libbinbuf standalone build")
	MESSAGE(STATUS "libbinbuf byte type: ${BINBUF_BYTE_TYPE}")

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WERROR_FLAG}")

	# library
	ADD_LIBRARY(binbuf SHARED ${LIBRARY_SOURCES} ${LIBRARY_HEADERS} ${LIBRARY_INTERNAL_HEADERS})
	SET_TARGET_PROPERTIES(binbuf PROPERTIES VERSION 0.0.0 SOVERSION 0)

	# and tests
	ENABLE_TESTING()

	ADD_SUBDIRECTORY(tests)

	INSTALL(FILES ${LIBRARY_HEADERS} ${PROJECT_BINARY_DIR}/binbuf/Config.hh DESTINATION include/binbuf)
	INSTALL(TARGETS binbuf LIBRARY DESTINATION lib)
ELSE(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	MESSAGE(STATUS "libbinbuf bundled build")
	MESSAGE(STATUS "libbinbuf byte type: ${BINBUF_BYTE_TYPE}")

	# library
	ADD_LIBRARY(binbuf STATIC ${LIBRARY_SOURCES} ${LIBRARY_HEADERS} ${LIBRARY_INTERNAL_HEADERS})

	# provide variables to parent
	SET(BINBUF_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} PARENT_SCOPE)
	SET(BINBUF_LIBRARIES binbuf PARENT_SCOPE)
ENDIF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
